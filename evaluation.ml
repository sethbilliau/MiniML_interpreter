(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)
    
open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, 
  generated by an explicit "raise" construct *)
exception EvalException ;;


(*......................................................................
  Environments and values 
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
      try !(List.assoc varname env) 
      with 
      | Not_found -> raise EvalException ;;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env) ;;

    (* Returns a printable string representation of an environment *)
    let rec env_to_string (env : env) : string =
      let extract_e v = 
      (match v with 
      | Val e -> e 
      | Closure (e, _) -> e) in
      match env with 
      | [] -> raise EvalException 
      | (id, valref) :: t -> 
            id ^ " -> " ^ exp_to_concrete_string (extract_e !valref) 
               ^ env_to_string t ;;

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val e -> exp_to_concrete_string e 
      | Closure (exp, env) -> 
          if printenvp then exp_to_concrete_string exp ^ " " ^
                            env_to_string env 
          else exp_to_concrete_string exp ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below, evaluates an expression exp
  in an enviornment env returning a result of type value. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a value and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as eval_e below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

exception UnboundVariable of string ;;
exception IllFormed of string ;;

let binopeval (op : binop) (v1 : expr) (v2 : expr) : expr =
  match op, v1, v2 with
  | Plus, Num x1, Num x2 -> Num (x1 + x2)
  | Plus, Float x1, Float x2 -> Float (x1 +. x2)
  | Plus, _, _ -> raise (IllFormed "Type Error")
  | Minus, Num x1, Num x2 -> Num (x1 - x2)
  | Minus, Float x1, Float x2 -> Float (x1 -. x2)
  | Minus, _, _ -> raise (IllFormed "Type Error")
  | Times, Num x1, Num x2 -> Num (x1 * x2) 
  | Times, Float x1, Float x2 -> Float (x1 *. x2) 
  | Times, _, _ -> raise (IllFormed "Type Error")
  | Equals, Num x1, Num x2 -> Bool (x1 = x2)
  | Equals, Bool b1, Bool b2 -> Bool (b1 = b2)
  | Equals, Float x1, Float x2 -> Bool (x1 = x2) 
  | Equals, _, _ -> raise (IllFormed "Type Error")
  | LessThan, Num x1, Num x2 -> Bool (x1 < x2)
  | LessThan, Float x1, Float x2 -> Bool (x1 < x2)
  | LessThan, Bool b1, Bool b2 -> Bool (b1 < b2)
  | LessThan, _, _ -> raise (IllFormed "Type Error")
  | Concat, String s1, String s2 -> String(s1 ^ s2)
  | Concat, _, _ -> raise (IllFormed "Type Error") ;;

let unopeval (op : unop) (e : expr) : expr = 
  match op, e with 
  | Negate, Num x -> Num (~- x)
  | Negate, Float x -> Float (~-. x)
  | Negate, Bool b -> Bool (not b)
  | Negate, _ -> raise (IllFormed "Type Error") ;;
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let eval_s (_exp : expr) (_env : Env.env) : Env.value =
  let rec eval (exp : expr) : expr = 
    match exp with 
    | Fun _ | Bool _ | Num _ | Float _ | String _ -> exp
    | Unassigned -> raise (EvalError "Error Unassigned: Unassigned variable")
    | Var x -> raise (EvalError ("Error Var: Unbounded variable" ^ " " ^ x))
    | Raise -> raise EvalException
    | Unop (u, e) -> unopeval u (eval e)
    | Binop (b, e1, e2) -> binopeval b (eval e1) (eval e2) 
    | Let (x, e1, e2) -> eval (subst x (eval e1) e2)
    | Letrec (x, e1, e2) -> 
        let evale1 = eval e1 in 
        eval (subst x (subst x (Letrec(x, evale1, Var(x))) evale1) e2) 
    | App (e1, e2) -> 
        (match eval e1 with
        | Fun (var, e1') -> eval (subst var (eval e2) e1')
        | _ -> raise (EvalError "Error App: First arg not a function"))
    | Conditional (i, t, e) -> 
        (match eval i with 
        | Bool b -> if b then eval t else eval e
        | _ -> raise (EvalError "Error Cond: If is not a bool"))
    in
  Val (eval _exp) ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
let extract_e (v : Env.value) : expr = 
  (match v with 
  | Val e -> e 
  | Closure (e, _) -> e) ;;

let evaluator (_exp : expr) (_env : Env.env) 
    (evaltype : expr -> Env.env -> Env.value) : Env.value =
  let open Env in 
  match _exp with 
  | Var x -> lookup _env x
  | Num n -> Val (Num (n))
  | Float f -> Val (Float (f))
  | String s -> Val (String (s))
  | Bool b-> Val (Bool (b))
  | Unop (u, ex) -> Val(unopeval u (extract_e (evaltype ex _env)))
  | Binop (binop, e1, e2) -> 
      Val(binopeval binop (extract_e (evaltype e1 _env)) 
                          (extract_e (evaltype e2 _env)))
  | Conditional (i, t, e) -> 
      (match (extract_e (evaltype i _env)) with
      | Bool b -> if b then (evaltype t _env) else (evaltype e _env)
      | _ -> raise (EvalError "Error Cond: If is not a bool"))
  | Let (var, e1, e2) -> 
      let newenv = extend _env var (ref (evaltype e1 _env)) in 
      evaltype e2 newenv
  | Letrec (var, e1, e2) -> 
      let unassignedref = ref (Val(Unassigned)) in 
      let addunassigned = extend _env var unassignedref in 
      let evaluated = evaltype e1 addunassigned in 
      unassignedref := evaluated; 
      evaltype e2 addunassigned
  | App _ | Fun _ -> raise (EvalError "Eval with evaltype")
  | Unassigned -> raise (EvalError "Error Unassigned: Unassigned variable")
  | Raise -> raise EvalException ;;

let rec eval_d (_exp : expr) (_env : Env.env) : Env.value =
  let open Env in 
  match _exp with 
  | Var _ | Float _ | String _ | Num _ | Bool _ | Unop _ | Binop _ 
  | Conditional _ | Let _ | Letrec _ -> evaluator _exp _env eval_d
  | App (e1, e2) -> 
      (match extract_e (eval_d e1 _env) with 
      | Fun (var, e1') -> 
          let newenv = extend _env var (ref (eval_d e2 _env)) in
          eval_d e1' newenv 
      | _ -> raise (EvalError "Error App: First arg not a function"))
  | Fun (var, e) -> Val (Fun (var, e))
  | Unassigned -> raise (EvalError "Error Unassigned: Unassigned variable")
  | Raise -> raise EvalException ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (_exp : expr) (_env : Env.env) : Env.value =
  let open Env in 
  match _exp with 
  | Var _ | Float _ | String _ | Num _ | Bool _ | Unop _ | Binop _ 
  | Conditional _ | Let _ | Letrec _ -> evaluator _exp _env eval_d
  | App (e1, e2) -> 
      (match eval_l e1 _env with 
      | Closure (exp, cenv) ->
          (match exp with 
          | Fun (var, e1') -> 
              let newenv = extend cenv var (ref (eval_l e2 _env)) in
              eval_l e1' newenv 
          | _ -> raise (EvalError "Error App: First arg not a function"))
      | _ -> raise (EvalError "Error App: First arg not a function"))
  | Fun _ -> close _exp _env
  | Unassigned -> raise (EvalError "Error Unassigned: Unassigned variable")
  | Raise -> raise EvalException ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within eval_s, eval_d, or eval_l. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_l ;;

